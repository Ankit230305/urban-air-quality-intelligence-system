"""Train regression and classification models for air quality prediction.

This script reads a processed feature table generated by the feature
engineering pipeline and trains two models:

* A regression model to predict PM2.5 concentration based on weather
  features (temperature, humidity, wind speed, precipitation).
* A classification model to predict AQI category (Good, Moderate, etc.).

The trained models are saved to the `models/` directory using joblib.
"""

from __future__ import annotations

import argparse
import os
import sys
from typing import Tuple

import joblib
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, classification_report
from sklearn.preprocessing import LabelEncoder


def parse_args(args: list[str]) -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Train regression and classification models on processed air quality data."
    )
    parser.add_argument(
        "--input-file",
        type=str,
        required=True,
        help="Path to the processed CSV file generated by feature engineering.",
    )
    parser.add_argument(
        "--output-dir",
        type=str,
        required=True,
        help="Directory where the trained models will be saved.",
    )
    return parser.parse_args(args)


def prepare_training_data(
    df: pd.DataFrame,
) -> Tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray, LabelEncoder]:
    """Prepare feature matrices and target vectors for regression and classification."""
    # Define feature columns; drop datetime and target columns
    feature_cols = [
        col for col in df.columns if col not in {"datetime", "aqi", "aqi_category", "pm2_5", "pm25"}
    ]
    X = df[feature_cols]
    # Fill missing values with column medians
    X = X.fillna(X.median())
    # Target for regression (prefer pm2_5, fallback to pm25)
    y_reg = df["pm2_5"] if "pm2_5" in df.columns else df["pm25"]
    y_reg = y_reg.fillna(y_reg.median())
    # Target for classification (AQI categories)
    y_clf = df["aqi_category"].fillna("Unknown")
    le = LabelEncoder()
    y_clf_encoded = le.fit_transform(y_clf)
    return X.values, y_reg.values, y_clf_encoded, le.classes_, le


def main(argv: list[str] | None = None) -> None:
    args = parse_args(argv or sys.argv[1:])
    input_file = args.input_file
    output_dir = args.output_dir
    os.makedirs(output_dir, exist_ok=True)

    df = pd.read_csv(input_file)
    # Drop rows with NaN in essential columns
    df = df.dropna(subset=[col for col in ["pm2_5", "pm25", "aqi_category"] if col in df.columns])

    X, y_reg, y_clf, class_names, label_encoder = prepare_training_data(df)

    # Split data into train and validation sets
    X_train, X_val, y_reg_train, y_reg_val, y_clf_train, y_clf_val = train_test_split(
        X, y_reg, y_clf, test_size=0.2, random_state=42
    )

    # Train regression model
    reg_model = RandomForestRegressor(n_estimators=200, random_state=42, n_jobs=-1, max_depth=10)
    reg_model.fit(X_train, y_reg_train)
    y_reg_pred = reg_model.predict(X_val)
    mae = mean_absolute_error(y_reg_val, y_reg_pred)
    print(f"Regression MAE: {mae:.2f} µg/m³")

    # Train classification model
    clf_model = RandomForestClassifier(n_estimators=300, random_state=42, n_jobs=-1, max_depth=10)
    clf_model.fit(X_train, y_clf_train)
    y_clf_pred = clf_model.predict(X_val)
    print(
        "Classification report:\n",
        classification_report(y_clf_val, y_clf_pred, target_names=class_names),
    )

    # Save models and label encoder
    reg_path = os.path.join(output_dir, "pm25_regressor.joblib")
    clf_path = os.path.join(output_dir, "aqi_classifier.joblib")
    le_path = os.path.join(output_dir, "aqi_label_encoder.joblib")
    joblib.dump(reg_model, reg_path)
    joblib.dump(clf_model, clf_path)
    joblib.dump(label_encoder, le_path)
    print(f"Saved regression model to {reg_path}")
    print(f"Saved classification model to {clf_path}")
    print(f"Saved label encoder to {le_path}")


if __name__ == "__main__":
    main()
