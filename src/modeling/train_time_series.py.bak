"""Train a Prophet model for time series forecasting of air pollution.

Prophet (formerly fbprophet) is used here to forecast PM2.5 concentrations
seven days ahead.  The input file must contain a `datetime` column and a
target column (either `pm2_5` or `pm25`).  The script outputs the
forecasted values to a CSV file in the provided output directory and
saves the fitted model for reuse.
"""

from __future__ import annotations

import argparse
import os
import sys

import joblib
import pandas as pd
from prophet import Prophet


def parse_args(args):
    parser = argparse.ArgumentParser(
        description="Train a Prophet model for PM2.5 time series forecasting."
    )
    parser.add_argument(
        "--input-file",
        type=str,
        required=True,
        help="Path to the processed CSV containing datetime and PM2.5 columns.",
    )
    parser.add_argument(
        "--output-dir",
        type=str,
        required=True,
        help="Directory where the forecast and model will be saved.",
    )
    parser.add_argument(
        "--forecast-horizon",
        type=int,
        default=7,
        help="Number of days to forecast into the future (default: 7)",
    )
    return parser.parse_args(args)


def main(argv=None):
    args = parse_args(argv or sys.argv[1:])
    input_file = args.input_file
    output_dir = args.output_dir
    horizon_days = args.forecast_horizon

    os.makedirs(output_dir, exist_ok=True)
    df = pd.read_csv(input_file)
    # Determine PM2.5 column
    if "pm2_5" in df.columns:
        target_col = "pm2_5"
    elif "pm25" in df.columns:
        target_col = "pm25"
    else:
        raise ValueError("Input file must contain a 'pm2_5' or 'pm25' column")

    # Prepare data for Prophet: columns must be named 'ds' and 'y'
    ts_df = df[["datetime", target_col]].dropna()
    ts_df = ts_df.rename(columns={"datetime": "ds", target_col: "y"})
    ts_df["ds"] = pd.to_datetime(ts_df["ds"], errors="coerce")
    ts_df = ts_df.sort_values("ds")

    model = Prophet()
    model.fit(ts_df)

    # Create future dataframe for forecasting
    future = model.make_future_dataframe(periods=horizon_days, freq="D")
    forecast = model.predict(future)

    # Save forecast to CSV
    forecast_out = os.path.join(output_dir, "pm25_forecast.csv")
    forecast.to_csv(forecast_out, index=False)
    print(f"Saved forecast to {forecast_out}")

    # Save model
    model_path = os.path.join(output_dir, "pm25_prophet_model.joblib")
    joblib.dump(model, model_path)
    print(f"Saved Prophet model to {model_path}")


if __name__ == "__main__":
    main()
